// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NullamWebApp.Data;

#nullable disable

namespace NullamWebApp.Data.Migrations
{
    [DbContext(typeof(NullamDbContext))]
    [Migration("20241014052358_InitialDataPatch")]
    partial class InitialDataPatch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NullamWebApp.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalLines")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EventEnds")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EventStarts")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-1234-56789abcdef0"),
                            AdditionalInfo = "Info kohale tulijatele",
                            EventEnds = new DateTimeOffset(new DateTime(2024, 11, 20, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventName = "Upcoming Test Event",
                            EventStarts = new DateTimeOffset(new DateTime(2024, 11, 20, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsOnline = false
                        },
                        new
                        {
                            Id = new Guid("0987fedc-ba65-4321-0fed-cba987654321"),
                            AdditionalInfo = "Info kohale tulijatele",
                            EventEnds = new DateTimeOffset(new DateTime(2024, 10, 10, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            EventName = "Past Test Event",
                            EventStarts = new DateTimeOffset(new DateTime(2024, 10, 10, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IsOnline = false
                        });
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.ParticipantCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistryCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ParticipantCompanies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1234abcd-5678-ef90-1234-56789fedcba0"),
                            CompanyName = "Test Company OÜ",
                            RegistryCode = 12400621
                        });
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.ParticipantEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParticipantCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParticipantCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParticipantPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantCompanyId");

                    b.HasIndex("ParticipantPersonId");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("532701dc-15e7-4f10-a715-21254afde477"),
                            EventId = new Guid("0987fedc-ba65-4321-0fed-cba987654321"),
                            ParticipantCount = 1,
                            ParticipantPersonId = new Guid("f1e2d3c4-b5a6-7890-1234-56789abcdef0"),
                            PaymentType = 1
                        },
                        new
                        {
                            Id = new Guid("9601c905-624e-4d73-af73-6d3fa9f8d424"),
                            EventId = new Guid("0987fedc-ba65-4321-0fed-cba987654321"),
                            ParticipantCompanyId = new Guid("1234abcd-5678-ef90-1234-56789fedcba0"),
                            ParticipantCount = 5,
                            PaymentType = 0
                        });
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.ParticipantPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdCode")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParticipantPeople");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1e2d3c4-b5a6-7890-1234-56789abcdef0"),
                            FirstName = "Test",
                            IdCode = 35204096585L,
                            LastName = "Tester"
                        });
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.Event", b =>
                {
                    b.HasOne("NullamWebApp.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.ParticipantEntry", b =>
                {
                    b.HasOne("NullamWebApp.Data.Models.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NullamWebApp.Data.Models.ParticipantCompany", "Company")
                        .WithMany("ParticipantEntry")
                        .HasForeignKey("ParticipantCompanyId");

                    b.HasOne("NullamWebApp.Data.Models.ParticipantPerson", "Person")
                        .WithMany("ParticipantEntry")
                        .HasForeignKey("ParticipantPersonId");

                    b.Navigation("Company");

                    b.Navigation("Event");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.ParticipantCompany", b =>
                {
                    b.Navigation("ParticipantEntry");
                });

            modelBuilder.Entity("NullamWebApp.Data.Models.ParticipantPerson", b =>
                {
                    b.Navigation("ParticipantEntry");
                });
#pragma warning restore 612, 618
        }
    }
}
